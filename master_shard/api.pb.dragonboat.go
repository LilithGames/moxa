// This code was autogenerated from protoc-gen-dragonboat, do not edit.
package master_shard

import (
	"context"
	"fmt"
	"runtime/debug"

	sm "github.com/lni/dragonboat/v3/statemachine"
	"google.golang.org/protobuf/proto"

	"github.com/LilithGames/protoc-gen-dragonboat/runtime"
)

type IMasterShardDragonboatServer interface {
	Healthz(req *HealthzRequest) (*HealthzResponse, error)
	GetStateVersion(req *GetStateVersionRequest) (*GetStateVersionResponse, error)
	ListShards(req *ListShardsRequest) (*ListShardsResponse, error)
	GetShard(req *GetShardRequest) (*GetShardResponse, error)
	CreateShard(req *CreateShardRequest) (*CreateShardResponse, error)
	UpdateShard(req *UpdateShardRequest) (*UpdateShardResponse, error)
	DeleteShard(req *DeleteShardRequest) (*DeleteShardResponse, error)
	GetNode(req *GetNodeRequest) (*GetNodeResponse, error)
	UpdateNode(req *UpdateNodeRequest) (*UpdateNodeResponse, error)
	CreateGroup(req *CreateGroupRequest) (*CreateGroupResponse, error)
	UpdateGroup(req *UpdateGroupRequest) (*UpdateGroupResponse, error)
	DeleteGroup(req *DeleteGroupRequest) (*DeleteGroupResponse, error)
	GetGroup(req *GetGroupRequest) (*GetGroupResponse, error)
	ListGroup(req *ListGroupRequest) (*ListGroupResponse, error)
}

type IMasterShardDragonboatClient interface {
	Healthz(ctx context.Context, req *HealthzRequest, opts ...runtime.DragonboatClientOption) (*HealthzResponse, error)
	GetStateVersion(ctx context.Context, req *GetStateVersionRequest, opts ...runtime.DragonboatClientOption) (*GetStateVersionResponse, error)
	ListShards(ctx context.Context, req *ListShardsRequest, opts ...runtime.DragonboatClientOption) (*ListShardsResponse, error)
	GetShard(ctx context.Context, req *GetShardRequest, opts ...runtime.DragonboatClientOption) (*GetShardResponse, error)
	CreateShard(ctx context.Context, req *CreateShardRequest, opts ...runtime.DragonboatClientOption) (*CreateShardResponse, error)
	UpdateShard(ctx context.Context, req *UpdateShardRequest, opts ...runtime.DragonboatClientOption) (*UpdateShardResponse, error)
	DeleteShard(ctx context.Context, req *DeleteShardRequest, opts ...runtime.DragonboatClientOption) (*DeleteShardResponse, error)
	GetNode(ctx context.Context, req *GetNodeRequest, opts ...runtime.DragonboatClientOption) (*GetNodeResponse, error)
	UpdateNode(ctx context.Context, req *UpdateNodeRequest, opts ...runtime.DragonboatClientOption) (*UpdateNodeResponse, error)
	CreateGroup(ctx context.Context, req *CreateGroupRequest, opts ...runtime.DragonboatClientOption) (*CreateGroupResponse, error)
	UpdateGroup(ctx context.Context, req *UpdateGroupRequest, opts ...runtime.DragonboatClientOption) (*UpdateGroupResponse, error)
	DeleteGroup(ctx context.Context, req *DeleteGroupRequest, opts ...runtime.DragonboatClientOption) (*DeleteGroupResponse, error)
	GetGroup(ctx context.Context, req *GetGroupRequest, opts ...runtime.DragonboatClientOption) (*GetGroupResponse, error)
	ListGroup(ctx context.Context, req *ListGroupRequest, opts ...runtime.DragonboatClientOption) (*ListGroupResponse, error)
}

func DragonboatMasterShardLookup(s IMasterShardDragonboatServer, query interface{}) (result interface{}, err error) {
	defer func() {
		if perr := recover(); perr != nil {
			err = fmt.Errorf("panic: %v\nstacktrace from panic: %s", perr, string(debug.Stack()))
		}
	}()
	switch q := query.(type) {
	case *HealthzRequest:
		resp, err := s.Healthz(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.Healthz(%v) err: %w", q, err)
		}
		return resp, nil
	case *GetStateVersionRequest:
		resp, err := s.GetStateVersion(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.GetStateVersion(%v) err: %w", q, err)
		}
		return resp, nil
	case *ListShardsRequest:
		resp, err := s.ListShards(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.ListShards(%v) err: %w", q, err)
		}
		return resp, nil
	case *GetShardRequest:
		resp, err := s.GetShard(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.GetShard(%v) err: %w", q, err)
		}
		return resp, nil
	case *GetNodeRequest:
		resp, err := s.GetNode(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.GetNode(%v) err: %w", q, err)
		}
		return resp, nil
	case *GetGroupRequest:
		resp, err := s.GetGroup(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.GetGroup(%v) err: %w", q, err)
		}
		return resp, nil
	case *ListGroupRequest:
		resp, err := s.ListGroup(q)
		if err != nil {
			return resp, fmt.Errorf("IMasterShardServer.ListGroup(%v) err: %w", q, err)
		}
		return resp, nil
	case *runtime.DragonboatVoid:
		// healthcheck
		return &runtime.DragonboatVoid{}, nil
	default:
		return nil, runtime.NewDragonboatError(runtime.ErrCodeUnknownRequest, fmt.Sprintf("ErrCodeUnknownRequest type: %T", q))
	}
}

func DragonboatMasterShardUpdateDispatch(s IMasterShardDragonboatServer, msg proto.Message) (result proto.Message, err error) {
	defer func() {
		if perr := recover(); perr != nil {
			err = fmt.Errorf("panic: %v\nstacktrace from panic: %s", perr, string(debug.Stack()))
		}
	}()
	switch m := msg.(type) {
	case *CreateShardRequest:
		resp, err := s.CreateShard(m)
		return resp, err
	case *UpdateShardRequest:
		resp, err := s.UpdateShard(m)
		return resp, err
	case *DeleteShardRequest:
		resp, err := s.DeleteShard(m)
		return resp, err
	case *UpdateNodeRequest:
		resp, err := s.UpdateNode(m)
		return resp, err
	case *CreateGroupRequest:
		resp, err := s.CreateGroup(m)
		return resp, err
	case *UpdateGroupRequest:
		resp, err := s.UpdateGroup(m)
		return resp, err
	case *DeleteGroupRequest:
		resp, err := s.DeleteGroup(m)
		return resp, err
	case *runtime.DragonboatVoid:
		// dummy update increate index
		return &runtime.DragonboatVoid{}, nil
	default:
		return nil, runtime.NewDragonboatError(runtime.ErrCodeUnknownRequest, fmt.Sprintf("ErrCodeUnknownRequest type: %T", m))
	}
}

func DragonboatMasterShardUpdate(s IMasterShardDragonboatServer, data []byte) (sm.Result, error) {
	msg, err := runtime.ParseDragonboatRequest(data)
	if err != nil {
		return runtime.MakeDragonboatResult(nil, err), nil
	}
	resp, err := DragonboatMasterShardUpdateDispatch(s, msg)
	return runtime.MakeDragonboatResult(resp, err), nil
}

func DragonboatMasterShardConcurrentUpdate(s IMasterShardDragonboatServer, entries []sm.Entry) ([]sm.Entry, error) {
	for i := range entries {
		entry := &entries[i]
		msg, err := runtime.ParseDragonboatRequest(entry.Cmd)
		if err != nil {
			entry.Result = runtime.MakeDragonboatResult(nil, err)
		} else {
			resp, err := DragonboatMasterShardUpdateDispatch(s, msg)
			entry.Result = runtime.MakeDragonboatResult(resp, err)
		}
	}
	return entries, nil
}

type MasterShardDragonboatClient struct {
	client runtime.IDragonboatClient
}

func NewMasterShardDragonboatClient(client runtime.IDragonboatClient) IMasterShardDragonboatClient {
	return &MasterShardDragonboatClient{client: client}
}
func (it *MasterShardDragonboatClient) Healthz(ctx context.Context, req *HealthzRequest, opts ...runtime.DragonboatClientOption) (*HealthzResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*HealthzResponse](resp, err)
}
func (it *MasterShardDragonboatClient) GetStateVersion(ctx context.Context, req *GetStateVersionRequest, opts ...runtime.DragonboatClientOption) (*GetStateVersionResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*GetStateVersionResponse](resp, err)
}
func (it *MasterShardDragonboatClient) ListShards(ctx context.Context, req *ListShardsRequest, opts ...runtime.DragonboatClientOption) (*ListShardsResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*ListShardsResponse](resp, err)
}
func (it *MasterShardDragonboatClient) GetShard(ctx context.Context, req *GetShardRequest, opts ...runtime.DragonboatClientOption) (*GetShardResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*GetShardResponse](resp, err)
}
func (it *MasterShardDragonboatClient) CreateShard(ctx context.Context, req *CreateShardRequest, opts ...runtime.DragonboatClientOption) (*CreateShardResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*CreateShardResponse](resp, err)
}
func (it *MasterShardDragonboatClient) UpdateShard(ctx context.Context, req *UpdateShardRequest, opts ...runtime.DragonboatClientOption) (*UpdateShardResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*UpdateShardResponse](resp, err)
}
func (it *MasterShardDragonboatClient) DeleteShard(ctx context.Context, req *DeleteShardRequest, opts ...runtime.DragonboatClientOption) (*DeleteShardResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*DeleteShardResponse](resp, err)
}
func (it *MasterShardDragonboatClient) GetNode(ctx context.Context, req *GetNodeRequest, opts ...runtime.DragonboatClientOption) (*GetNodeResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*GetNodeResponse](resp, err)
}
func (it *MasterShardDragonboatClient) UpdateNode(ctx context.Context, req *UpdateNodeRequest, opts ...runtime.DragonboatClientOption) (*UpdateNodeResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*UpdateNodeResponse](resp, err)
}
func (it *MasterShardDragonboatClient) CreateGroup(ctx context.Context, req *CreateGroupRequest, opts ...runtime.DragonboatClientOption) (*CreateGroupResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*CreateGroupResponse](resp, err)
}
func (it *MasterShardDragonboatClient) UpdateGroup(ctx context.Context, req *UpdateGroupRequest, opts ...runtime.DragonboatClientOption) (*UpdateGroupResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*UpdateGroupResponse](resp, err)
}
func (it *MasterShardDragonboatClient) DeleteGroup(ctx context.Context, req *DeleteGroupRequest, opts ...runtime.DragonboatClientOption) (*DeleteGroupResponse, error) {
	resp, err := it.client.Mutate(ctx, req, opts...)
	return runtime.ClientResponseConversion[*DeleteGroupResponse](resp, err)
}
func (it *MasterShardDragonboatClient) GetGroup(ctx context.Context, req *GetGroupRequest, opts ...runtime.DragonboatClientOption) (*GetGroupResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*GetGroupResponse](resp, err)
}
func (it *MasterShardDragonboatClient) ListGroup(ctx context.Context, req *ListGroupRequest, opts ...runtime.DragonboatClientOption) (*ListGroupResponse, error) {
	resp, err := it.client.Query(ctx, req, opts...)
	return runtime.ClientResponseConversion[*ListGroupResponse](resp, err)
}
