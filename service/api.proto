syntax = "proto3";
package service;
option go_package = "github.com/LilithGames/moxa/service";

import "google/api/annotations.proto";
import "master_shard/state.proto";
import "cluster/member.proto";
import "utils/sync.proto";

message StringMessage {
  int32 id = 1;
  optional int32 value = 2;
}

message NodeHostInfo {
  string node_host_id = 1;
  string raft_address = 2;
  repeated ShardInfo shard_info_list = 3;
  repeated LogShardInfo log_shard_info_list = 4;
}

message NodeInfo {
  uint64 node_id = 1;
  int32  node_index = 2;
  string node_host_id = 3;
  string host_name = 4;
  string addr = 5;
  bool   following = 6;
  bool   leading = 7;
}

message HealthzRequest {}
message HealthzResponse {}
message ShardHealthzRequest{
    uint64 shard_id = 1;
}
message ShardHealthzResponse{}
message NodeHostInfoRequest {}
message NodeHostInfoResponse {
  NodeHostInfo node_host_info = 1;
}
message ShardNopRequest{
    uint64 shard_id = 1;
}
message ShardNopResponse{}

message NodeView {
  string node_host_id = 1;
  uint64 node_id = 2;
  string addr = 3;
}
message ShardSpec {
  string shard_name = 1;
  uint64 shard_id = 2;
  repeated NodeView initials = 3;
  repeated NodeView nodes = 4;
  int32 replica = 5;
  uint64 last_node_id = 6;
}

message ShardInfo {
  uint64 shard_id = 1;
  uint64 node_id = 2;
  map<uint64, string> nodes = 3;
  string state_machine_type = 4;
  bool is_leader = 5;
  bool is_observer = 6;
  bool is_witness = 7;
  bool pending = 8;
}

message LogShardInfo {
  uint64 shard_id = 1;
  uint64 node_id = 2;
}

message ShardAddNodeRequest{
  uint64 shard_id = 1;
  uint64 node_id = 2;
  optional string addr = 3;
  optional int32 node_index = 4;
}
message ShardAddNodeResponse{}
message ShardRemoveNodeRequest{
  uint64 shard_id = 1;
  optional uint64 node_id = 2;
  optional int32 node_index = 3;
}
message ShardRemoveNodeResponse{
  int32 updated = 1;
}
message ShardTransferLeaderRequest{
  uint64 shard_id = 1;
  optional uint64 node_id = 2;
  optional int32 node_index = 3;
}
message ShardTransferLeaderResponse{}
message ShardListNodeRequest{
  uint64 shard_id = 1;
}
message ShardListNodeResponse{
  repeated NodeInfo nodes = 1;
}
message CreateSnapshotRequest{
  uint64 shard_id = 1;
  optional string export_path = 2;
  optional uint64 compaction_overhead = 3;
}
message CreateSnapshotResponse{
  uint64 snapshot_index = 1;
}

message SyncAddNodeRequest {
  uint64 shard_id = 1;
  uint64 node_id = 2;
  optional string addr = 3;
  optional int32 node_index = 4;

  optional bool force = 100;
}
message SyncAddNodeResponse {
  uint64 updated = 1;
}
message SyncRemoveNodeRequest {
  uint64 shard_id = 1;
  optional uint64 node_id = 2;
  optional int32 node_index = 3;

  optional bool force = 100;
}
message SyncRemoveNodeResponse {
  uint64 updated = 1;
}

message ListMemberStateRequest {
}
message ListMemberStateResponse {
  repeated cluster.MemberState members = 1;
  uint64 version = 2;
}
message SubscribeMemberStateRequest {
  uint64 version = 1;
}

message SubscribeMemberStateResponse {
  cluster.MemberState state = 1;
  uint64 version = 2;
  utils.SyncStateType type = 3;
}

message SyncMemberStateRequest {}
message SyncMemberStateResponse {
  cluster.MemberState state = 1;
  uint64 version = 2;
  utils.SyncStateType type = 3;
}

service NodeHost {
  rpc Info(NodeHostInfoRequest) returns (NodeHostInfoResponse) {
    option (google.api.http) = {
      get: "/nodehost/info"
    };
  }
  rpc Healthz(HealthzRequest) returns (HealthzResponse) {
    option (google.api.http) = {
      get: "/healthz"
    };
  }
  rpc ShardHealthz(ShardHealthzRequest) returns (ShardHealthzResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/healthz"
    };
  }
  rpc ShardNop(ShardNopRequest) returns (ShardNopResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/nop"
    };
  }
  rpc AddNode(ShardAddNodeRequest) returns (ShardAddNodeResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/node/add"
    };
  }
  rpc RemoveNode(ShardRemoveNodeRequest) returns (ShardRemoveNodeResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/node/remove"
    };
  }
  rpc SyncAddNode(SyncAddNodeRequest) returns (SyncAddNodeResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/node/sync_add"
    };
  }
  rpc SyncRemoveNode(SyncRemoveNodeRequest) returns (SyncRemoveNodeResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/node/sync_remove"
    };
  }
  rpc ListNode(ShardListNodeRequest) returns (ShardListNodeResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/node/list"
    };
  }
  rpc TransferLeader(ShardTransferLeaderRequest) returns (ShardTransferLeaderResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/node/lead"
    };
  }
  rpc CreateSnapshot(CreateSnapshotRequest) returns (CreateSnapshotResponse) {
    option (google.api.http) = {
      get: "/shard/{shard_id}/snapshot/create"
    };
  }
  rpc ListMemberState(ListMemberStateRequest) returns (ListMemberStateResponse) {
    option (google.api.http) = {
      get: "/member/state/list",
    };
  }
  rpc SubscribeMemberState(SubscribeMemberStateRequest) returns (stream SubscribeMemberStateResponse) {
    option (google.api.http) = {
      get: "/member/state/subscribe",
    };
  }
  rpc SyncMemberState(SyncMemberStateRequest) returns (stream SyncMemberStateResponse) {
    option (google.api.http) = {
      get: "/member/state/sync",
    };
  }
}

message AddShardSpecRequest {
  string shard_name = 1;
  string profile_name = 2;
  optional int32 replica = 3;
  map<string, string> labels = 4;
}
message AddShardSpecResponse {
  ShardSpec shard = 1;
}
message RemoveShardSpecRequest {
  string shard_name = 1;
}
message RemoveShardSpecResponse {
  int32 updated = 1;
}
message RebalanceShardSpecRequest {
  string shard_name = 1;
  optional int32 replica = 2;
}
message RebalanceShardSpecResponse {
  int32 updated = 1;
}
message ListShardSpecRequest {
  bool status = 1;
}
message ListShardSpecResponse {
  repeated ShardView shards = 1;
  uint64 version = 2;
}
message GetShardSpecRequest {
  string shard_name = 1;
}
enum ShardStatusType {
  Unknown = 0;
  Updating = 1;
  Ready = 2;
}
message ShardStatus {
  repeated NodeStatusView nodes = 2;
  repeated LogNodeStatusView log_nodes = 3;
}
message NodeStatusView {
  string node_host_id = 1;
  uint64 node_id = 2;
  string addr = 3;
  map<uint64, string> nodes = 4;
  bool leading = 5;
}
message LogNodeStatusView {
  string node_host_id = 1;
  uint64 node_id = 2;
  string addr = 3;
}
message ShardHealthzView {
  bool healthz = 5;
  optional string healthz_detail = 6;
}
message ShardView {
  ShardSpec spec = 1;
  optional ShardStatus status = 2;
  ShardStatusType type = 3;
  optional string type_detail = 4;
  ShardHealthzView healthz = 5;
}
message GetShardSpecResponse {
  ShardView shard = 1;
}

message MigrationNodeView{
  uint64 node_id = 1;
  string version = 2;
  repeated uint64 nodes = 3;
  uint64 epoch = 4;
}
message MigrationState {
  uint64 shard_id = 1;
  string type = 2;
  string version = 3;
  uint64 Epoch = 4;
  map<uint64, MigrationNodeView> node_upgraded = 5;
  map<uint64, MigrationNodeView> node_saved = 6;
  uint64 state_index = 7;
}
message MigrationStateError {
  uint64 shard_id = 1;
  string error = 2;
}
message MigrationStateListItem {
  oneof item {
    MigrationState data = 1;
    MigrationStateError err = 2;
  }
}

message CreateMigrationRequest {
  uint64 shard_id = 1;
}
message CreateMigrationResponse {

}
message QueryMigrationRequest {
  uint64 shard_id = 1;
}
message QueryMigrationResponse {
  MigrationState state = 1;
}
message DeleteMigrationRequest {
  uint64 shard_id = 1;
}
message DeleteMigrationResponse {

}
message ListMigrationRequest {

}
message ListMigrationResponse {
  repeated MigrationStateListItem migrations = 1;
}

message UpdateNodeSpecRequest {
  master_shard.NodeSpec node = 2;
}
message UpdateNodeSpecResponse {
  uint64 updated = 1;
}

message GetNodeSpecRequest {
  optional string node_host_id = 1;
  optional int32 node_index = 2;
}
message GetNodeSpecResponse {
  master_shard.NodeSpec node = 1;
}
message CordonNodeSpecRequest {
  optional string node_host_id = 1;
  optional int32 node_index = 2;
}
message CordonNodeSpecResponse {
  uint64 updated = 1;
}
message UncordonNodeSpecRequest {
  optional string node_host_id = 1;
  optional int32 node_index = 2;
}
message UncordonNodeSpecResponse {
  uint64 updated = 1;
}
message DrainNodeSpecRequest {
  optional string node_host_id = 1;
  optional int32 node_index = 2;
}
message DrainNodeSpecResponse {
  uint64 updated = 1;
}

service Spec {
  rpc AddShardSpec(AddShardSpecRequest) returns (AddShardSpecResponse) {
    option (google.api.http) = {
      get: "/spec/shard/{shard_name}/add"
    };
  }
  rpc RemoveShardSpec(RemoveShardSpecRequest) returns (RemoveShardSpecResponse) {
    option (google.api.http) = {
      get: "/spec/shard/{shard_name}/remove"
    };
  }
  rpc RebalanceShardSpec(RebalanceShardSpecRequest) returns (RebalanceShardSpecResponse) {
    option (google.api.http) = {
      get: "/spec/shard/{shard_name}/rebalance"
    };
  }
  rpc ListShardSpec(ListShardSpecRequest) returns (ListShardSpecResponse) {
    option (google.api.http) = {
      get: "/spec/shard/list"
    };
  }
  rpc GetShardSpec(GetShardSpecRequest) returns (GetShardSpecResponse) {
    option (google.api.http) = {
      get: "/spec/shard/{shard_name}/get"
    };
  }

  rpc CreateMigration(CreateMigrationRequest) returns (CreateMigrationResponse) {
    option (google.api.http) = {
      get: "/spec/migration/{shard_id}/create"
    };
  }
  rpc GetMigration(QueryMigrationRequest) returns (QueryMigrationResponse) {
    option (google.api.http) = {
      get: "/spec/migration/{shard_id}/get"
    };
  }
  rpc ListMigration(ListMigrationRequest) returns (ListMigrationResponse) {
    option (google.api.http) = {
      get: "/spec/migration/list"
    };
  }
  rpc UpdateNodeSpec(UpdateNodeSpecRequest) returns (UpdateNodeSpecResponse) {
    option (google.api.http) = {
      get: "/spec/node/update"
    };
  }
  rpc GetNodeSpec(GetNodeSpecRequest) returns (GetNodeSpecResponse) {
    option (google.api.http) = {
      get: "/spec/node/get"
    };
  }
  rpc CordonNodeSpec(CordonNodeSpecRequest) returns (CordonNodeSpecResponse) {
    option (google.api.http) = {
      get: "/spec/node/cordon"
    };
  }
  rpc UncordonNodeSpec(UncordonNodeSpecRequest) returns (UncordonNodeSpecResponse) {
    option (google.api.http) = {
      get: "/spec/node/uncordon"
    };
  }
  rpc DrainNodeSpec(DrainNodeSpecRequest) returns (DrainNodeSpecResponse) {
    option (google.api.http) = {
      get: "/spec/node/drain"
    };
  }
}

