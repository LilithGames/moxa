// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeHostClient is the client API for NodeHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeHostClient interface {
	Info(ctx context.Context, in *NodeHostInfoRequest, opts ...grpc.CallOption) (*NodeHostInfoResponse, error)
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	ShardHealthz(ctx context.Context, in *ShardHealthzRequest, opts ...grpc.CallOption) (*ShardHealthzResponse, error)
	ShardNop(ctx context.Context, in *ShardNopRequest, opts ...grpc.CallOption) (*ShardNopResponse, error)
	AddNode(ctx context.Context, in *ShardAddNodeRequest, opts ...grpc.CallOption) (*ShardAddNodeResponse, error)
	RemoveNode(ctx context.Context, in *ShardRemoveNodeRequest, opts ...grpc.CallOption) (*ShardRemoveNodeResponse, error)
	SyncAddNode(ctx context.Context, in *SyncAddNodeRequest, opts ...grpc.CallOption) (*SyncAddNodeResponse, error)
	SyncRemoveNode(ctx context.Context, in *SyncRemoveNodeRequest, opts ...grpc.CallOption) (*SyncRemoveNodeResponse, error)
	ListNode(ctx context.Context, in *ShardListNodeRequest, opts ...grpc.CallOption) (*ShardListNodeResponse, error)
	TransferLeader(ctx context.Context, in *ShardTransferLeaderRequest, opts ...grpc.CallOption) (*ShardTransferLeaderResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	ListMemberState(ctx context.Context, in *ListMemberStateRequest, opts ...grpc.CallOption) (*ListMemberStateResponse, error)
	SubscribeMemberState(ctx context.Context, in *SubscribeMemberStateRequest, opts ...grpc.CallOption) (NodeHost_SubscribeMemberStateClient, error)
}

type nodeHostClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeHostClient(cc grpc.ClientConnInterface) NodeHostClient {
	return &nodeHostClient{cc}
}

func (c *nodeHostClient) Info(ctx context.Context, in *NodeHostInfoRequest, opts ...grpc.CallOption) (*NodeHostInfoResponse, error) {
	out := new(NodeHostInfoResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ShardHealthz(ctx context.Context, in *ShardHealthzRequest, opts ...grpc.CallOption) (*ShardHealthzResponse, error) {
	out := new(ShardHealthzResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ShardHealthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ShardNop(ctx context.Context, in *ShardNopRequest, opts ...grpc.CallOption) (*ShardNopResponse, error) {
	out := new(ShardNopResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ShardNop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) AddNode(ctx context.Context, in *ShardAddNodeRequest, opts ...grpc.CallOption) (*ShardAddNodeResponse, error) {
	out := new(ShardAddNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) RemoveNode(ctx context.Context, in *ShardRemoveNodeRequest, opts ...grpc.CallOption) (*ShardRemoveNodeResponse, error) {
	out := new(ShardRemoveNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) SyncAddNode(ctx context.Context, in *SyncAddNodeRequest, opts ...grpc.CallOption) (*SyncAddNodeResponse, error) {
	out := new(SyncAddNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/SyncAddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) SyncRemoveNode(ctx context.Context, in *SyncRemoveNodeRequest, opts ...grpc.CallOption) (*SyncRemoveNodeResponse, error) {
	out := new(SyncRemoveNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/SyncRemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ListNode(ctx context.Context, in *ShardListNodeRequest, opts ...grpc.CallOption) (*ShardListNodeResponse, error) {
	out := new(ShardListNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ListNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) TransferLeader(ctx context.Context, in *ShardTransferLeaderRequest, opts ...grpc.CallOption) (*ShardTransferLeaderResponse, error) {
	out := new(ShardTransferLeaderResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/TransferLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/CreateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ListMemberState(ctx context.Context, in *ListMemberStateRequest, opts ...grpc.CallOption) (*ListMemberStateResponse, error) {
	out := new(ListMemberStateResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ListMemberState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) SubscribeMemberState(ctx context.Context, in *SubscribeMemberStateRequest, opts ...grpc.CallOption) (NodeHost_SubscribeMemberStateClient, error) {
	stream, err := c.cc.NewStream(ctx, &NodeHost_ServiceDesc.Streams[0], "/service.NodeHost/SubscribeMemberState", opts...)
	if err != nil {
		return nil, err
	}
	x := &nodeHostSubscribeMemberStateClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NodeHost_SubscribeMemberStateClient interface {
	Recv() (*SubscribeMemberStateResponse, error)
	grpc.ClientStream
}

type nodeHostSubscribeMemberStateClient struct {
	grpc.ClientStream
}

func (x *nodeHostSubscribeMemberStateClient) Recv() (*SubscribeMemberStateResponse, error) {
	m := new(SubscribeMemberStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NodeHostServer is the server API for NodeHost service.
// All implementations must embed UnimplementedNodeHostServer
// for forward compatibility
type NodeHostServer interface {
	Info(context.Context, *NodeHostInfoRequest) (*NodeHostInfoResponse, error)
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	ShardHealthz(context.Context, *ShardHealthzRequest) (*ShardHealthzResponse, error)
	ShardNop(context.Context, *ShardNopRequest) (*ShardNopResponse, error)
	AddNode(context.Context, *ShardAddNodeRequest) (*ShardAddNodeResponse, error)
	RemoveNode(context.Context, *ShardRemoveNodeRequest) (*ShardRemoveNodeResponse, error)
	SyncAddNode(context.Context, *SyncAddNodeRequest) (*SyncAddNodeResponse, error)
	SyncRemoveNode(context.Context, *SyncRemoveNodeRequest) (*SyncRemoveNodeResponse, error)
	ListNode(context.Context, *ShardListNodeRequest) (*ShardListNodeResponse, error)
	TransferLeader(context.Context, *ShardTransferLeaderRequest) (*ShardTransferLeaderResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	ListMemberState(context.Context, *ListMemberStateRequest) (*ListMemberStateResponse, error)
	SubscribeMemberState(*SubscribeMemberStateRequest, NodeHost_SubscribeMemberStateServer) error
	mustEmbedUnimplementedNodeHostServer()
}

// UnimplementedNodeHostServer must be embedded to have forward compatible implementations.
type UnimplementedNodeHostServer struct {
}

func (UnimplementedNodeHostServer) Info(context.Context, *NodeHostInfoRequest) (*NodeHostInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedNodeHostServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedNodeHostServer) ShardHealthz(context.Context, *ShardHealthzRequest) (*ShardHealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardHealthz not implemented")
}
func (UnimplementedNodeHostServer) ShardNop(context.Context, *ShardNopRequest) (*ShardNopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardNop not implemented")
}
func (UnimplementedNodeHostServer) AddNode(context.Context, *ShardAddNodeRequest) (*ShardAddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedNodeHostServer) RemoveNode(context.Context, *ShardRemoveNodeRequest) (*ShardRemoveNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedNodeHostServer) SyncAddNode(context.Context, *SyncAddNodeRequest) (*SyncAddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAddNode not implemented")
}
func (UnimplementedNodeHostServer) SyncRemoveNode(context.Context, *SyncRemoveNodeRequest) (*SyncRemoveNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRemoveNode not implemented")
}
func (UnimplementedNodeHostServer) ListNode(context.Context, *ShardListNodeRequest) (*ShardListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedNodeHostServer) TransferLeader(context.Context, *ShardTransferLeaderRequest) (*ShardTransferLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLeader not implemented")
}
func (UnimplementedNodeHostServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedNodeHostServer) ListMemberState(context.Context, *ListMemberStateRequest) (*ListMemberStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemberState not implemented")
}
func (UnimplementedNodeHostServer) SubscribeMemberState(*SubscribeMemberStateRequest, NodeHost_SubscribeMemberStateServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMemberState not implemented")
}
func (UnimplementedNodeHostServer) mustEmbedUnimplementedNodeHostServer() {}

// UnsafeNodeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeHostServer will
// result in compilation errors.
type UnsafeNodeHostServer interface {
	mustEmbedUnimplementedNodeHostServer()
}

func RegisterNodeHostServer(s grpc.ServiceRegistrar, srv NodeHostServer) {
	s.RegisterService(&NodeHost_ServiceDesc, srv)
}

func _NodeHost_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHostInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).Info(ctx, req.(*NodeHostInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ShardHealthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardHealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ShardHealthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ShardHealthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ShardHealthz(ctx, req.(*ShardHealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ShardNop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardNopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ShardNop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ShardNop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ShardNop(ctx, req.(*ShardNopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardAddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).AddNode(ctx, req.(*ShardAddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardRemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).RemoveNode(ctx, req.(*ShardRemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_SyncAddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncAddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).SyncAddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/SyncAddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).SyncAddNode(ctx, req.(*SyncAddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_SyncRemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).SyncRemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/SyncRemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).SyncRemoveNode(ctx, req.(*SyncRemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ListNode(ctx, req.(*ShardListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_TransferLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardTransferLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).TransferLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/TransferLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).TransferLeader(ctx, req.(*ShardTransferLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ListMemberState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemberStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ListMemberState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ListMemberState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ListMemberState(ctx, req.(*ListMemberStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_SubscribeMemberState_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeMemberStateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NodeHostServer).SubscribeMemberState(m, &nodeHostSubscribeMemberStateServer{stream})
}

type NodeHost_SubscribeMemberStateServer interface {
	Send(*SubscribeMemberStateResponse) error
	grpc.ServerStream
}

type nodeHostSubscribeMemberStateServer struct {
	grpc.ServerStream
}

func (x *nodeHostSubscribeMemberStateServer) Send(m *SubscribeMemberStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

// NodeHost_ServiceDesc is the grpc.ServiceDesc for NodeHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.NodeHost",
	HandlerType: (*NodeHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _NodeHost_Info_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _NodeHost_Healthz_Handler,
		},
		{
			MethodName: "ShardHealthz",
			Handler:    _NodeHost_ShardHealthz_Handler,
		},
		{
			MethodName: "ShardNop",
			Handler:    _NodeHost_ShardNop_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _NodeHost_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _NodeHost_RemoveNode_Handler,
		},
		{
			MethodName: "SyncAddNode",
			Handler:    _NodeHost_SyncAddNode_Handler,
		},
		{
			MethodName: "SyncRemoveNode",
			Handler:    _NodeHost_SyncRemoveNode_Handler,
		},
		{
			MethodName: "ListNode",
			Handler:    _NodeHost_ListNode_Handler,
		},
		{
			MethodName: "TransferLeader",
			Handler:    _NodeHost_TransferLeader_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _NodeHost_CreateSnapshot_Handler,
		},
		{
			MethodName: "ListMemberState",
			Handler:    _NodeHost_ListMemberState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeMemberState",
			Handler:       _NodeHost_SubscribeMemberState_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service/api.proto",
}

// SpecClient is the client API for Spec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecClient interface {
	AddShardSpec(ctx context.Context, in *AddShardSpecRequest, opts ...grpc.CallOption) (*AddShardSpecResponse, error)
	RemoveShardSpec(ctx context.Context, in *RemoveShardSpecRequest, opts ...grpc.CallOption) (*RemoveShardSpecResponse, error)
	RebalanceShardSpec(ctx context.Context, in *RebalanceShardSpecRequest, opts ...grpc.CallOption) (*RebalanceShardSpecResponse, error)
	ListShardSpec(ctx context.Context, in *ListShardSpecRequest, opts ...grpc.CallOption) (*ListShardSpecResponse, error)
	GetShardSpec(ctx context.Context, in *GetShardSpecRequest, opts ...grpc.CallOption) (*GetShardSpecResponse, error)
	CreateMigration(ctx context.Context, in *CreateMigrationRequest, opts ...grpc.CallOption) (*CreateMigrationResponse, error)
	GetMigration(ctx context.Context, in *QueryMigrationRequest, opts ...grpc.CallOption) (*QueryMigrationResponse, error)
	ListMigration(ctx context.Context, in *ListMigrationRequest, opts ...grpc.CallOption) (*ListMigrationResponse, error)
	UpdateNodeSpec(ctx context.Context, in *UpdateNodeSpecRequest, opts ...grpc.CallOption) (*UpdateNodeSpecResponse, error)
	GetNodeSpec(ctx context.Context, in *GetNodeSpecRequest, opts ...grpc.CallOption) (*GetNodeSpecResponse, error)
	CordonNodeSpec(ctx context.Context, in *CordonNodeSpecRequest, opts ...grpc.CallOption) (*CordonNodeSpecResponse, error)
	UncordonNodeSpec(ctx context.Context, in *UncordonNodeSpecRequest, opts ...grpc.CallOption) (*UncordonNodeSpecResponse, error)
	DrainNodeSpec(ctx context.Context, in *DrainNodeSpecRequest, opts ...grpc.CallOption) (*DrainNodeSpecResponse, error)
}

type specClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecClient(cc grpc.ClientConnInterface) SpecClient {
	return &specClient{cc}
}

func (c *specClient) AddShardSpec(ctx context.Context, in *AddShardSpecRequest, opts ...grpc.CallOption) (*AddShardSpecResponse, error) {
	out := new(AddShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/AddShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) RemoveShardSpec(ctx context.Context, in *RemoveShardSpecRequest, opts ...grpc.CallOption) (*RemoveShardSpecResponse, error) {
	out := new(RemoveShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/RemoveShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) RebalanceShardSpec(ctx context.Context, in *RebalanceShardSpecRequest, opts ...grpc.CallOption) (*RebalanceShardSpecResponse, error) {
	out := new(RebalanceShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/RebalanceShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) ListShardSpec(ctx context.Context, in *ListShardSpecRequest, opts ...grpc.CallOption) (*ListShardSpecResponse, error) {
	out := new(ListShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/ListShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) GetShardSpec(ctx context.Context, in *GetShardSpecRequest, opts ...grpc.CallOption) (*GetShardSpecResponse, error) {
	out := new(GetShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/GetShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) CreateMigration(ctx context.Context, in *CreateMigrationRequest, opts ...grpc.CallOption) (*CreateMigrationResponse, error) {
	out := new(CreateMigrationResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/CreateMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) GetMigration(ctx context.Context, in *QueryMigrationRequest, opts ...grpc.CallOption) (*QueryMigrationResponse, error) {
	out := new(QueryMigrationResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/GetMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) ListMigration(ctx context.Context, in *ListMigrationRequest, opts ...grpc.CallOption) (*ListMigrationResponse, error) {
	out := new(ListMigrationResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/ListMigration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) UpdateNodeSpec(ctx context.Context, in *UpdateNodeSpecRequest, opts ...grpc.CallOption) (*UpdateNodeSpecResponse, error) {
	out := new(UpdateNodeSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/UpdateNodeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) GetNodeSpec(ctx context.Context, in *GetNodeSpecRequest, opts ...grpc.CallOption) (*GetNodeSpecResponse, error) {
	out := new(GetNodeSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/GetNodeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) CordonNodeSpec(ctx context.Context, in *CordonNodeSpecRequest, opts ...grpc.CallOption) (*CordonNodeSpecResponse, error) {
	out := new(CordonNodeSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/CordonNodeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) UncordonNodeSpec(ctx context.Context, in *UncordonNodeSpecRequest, opts ...grpc.CallOption) (*UncordonNodeSpecResponse, error) {
	out := new(UncordonNodeSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/UncordonNodeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) DrainNodeSpec(ctx context.Context, in *DrainNodeSpecRequest, opts ...grpc.CallOption) (*DrainNodeSpecResponse, error) {
	out := new(DrainNodeSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/DrainNodeSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecServer is the server API for Spec service.
// All implementations must embed UnimplementedSpecServer
// for forward compatibility
type SpecServer interface {
	AddShardSpec(context.Context, *AddShardSpecRequest) (*AddShardSpecResponse, error)
	RemoveShardSpec(context.Context, *RemoveShardSpecRequest) (*RemoveShardSpecResponse, error)
	RebalanceShardSpec(context.Context, *RebalanceShardSpecRequest) (*RebalanceShardSpecResponse, error)
	ListShardSpec(context.Context, *ListShardSpecRequest) (*ListShardSpecResponse, error)
	GetShardSpec(context.Context, *GetShardSpecRequest) (*GetShardSpecResponse, error)
	CreateMigration(context.Context, *CreateMigrationRequest) (*CreateMigrationResponse, error)
	GetMigration(context.Context, *QueryMigrationRequest) (*QueryMigrationResponse, error)
	ListMigration(context.Context, *ListMigrationRequest) (*ListMigrationResponse, error)
	UpdateNodeSpec(context.Context, *UpdateNodeSpecRequest) (*UpdateNodeSpecResponse, error)
	GetNodeSpec(context.Context, *GetNodeSpecRequest) (*GetNodeSpecResponse, error)
	CordonNodeSpec(context.Context, *CordonNodeSpecRequest) (*CordonNodeSpecResponse, error)
	UncordonNodeSpec(context.Context, *UncordonNodeSpecRequest) (*UncordonNodeSpecResponse, error)
	DrainNodeSpec(context.Context, *DrainNodeSpecRequest) (*DrainNodeSpecResponse, error)
	mustEmbedUnimplementedSpecServer()
}

// UnimplementedSpecServer must be embedded to have forward compatible implementations.
type UnimplementedSpecServer struct {
}

func (UnimplementedSpecServer) AddShardSpec(context.Context, *AddShardSpecRequest) (*AddShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShardSpec not implemented")
}
func (UnimplementedSpecServer) RemoveShardSpec(context.Context, *RemoveShardSpecRequest) (*RemoveShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShardSpec not implemented")
}
func (UnimplementedSpecServer) RebalanceShardSpec(context.Context, *RebalanceShardSpecRequest) (*RebalanceShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebalanceShardSpec not implemented")
}
func (UnimplementedSpecServer) ListShardSpec(context.Context, *ListShardSpecRequest) (*ListShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShardSpec not implemented")
}
func (UnimplementedSpecServer) GetShardSpec(context.Context, *GetShardSpecRequest) (*GetShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShardSpec not implemented")
}
func (UnimplementedSpecServer) CreateMigration(context.Context, *CreateMigrationRequest) (*CreateMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMigration not implemented")
}
func (UnimplementedSpecServer) GetMigration(context.Context, *QueryMigrationRequest) (*QueryMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMigration not implemented")
}
func (UnimplementedSpecServer) ListMigration(context.Context, *ListMigrationRequest) (*ListMigrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMigration not implemented")
}
func (UnimplementedSpecServer) UpdateNodeSpec(context.Context, *UpdateNodeSpecRequest) (*UpdateNodeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeSpec not implemented")
}
func (UnimplementedSpecServer) GetNodeSpec(context.Context, *GetNodeSpecRequest) (*GetNodeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeSpec not implemented")
}
func (UnimplementedSpecServer) CordonNodeSpec(context.Context, *CordonNodeSpecRequest) (*CordonNodeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CordonNodeSpec not implemented")
}
func (UnimplementedSpecServer) UncordonNodeSpec(context.Context, *UncordonNodeSpecRequest) (*UncordonNodeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UncordonNodeSpec not implemented")
}
func (UnimplementedSpecServer) DrainNodeSpec(context.Context, *DrainNodeSpecRequest) (*DrainNodeSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DrainNodeSpec not implemented")
}
func (UnimplementedSpecServer) mustEmbedUnimplementedSpecServer() {}

// UnsafeSpecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecServer will
// result in compilation errors.
type UnsafeSpecServer interface {
	mustEmbedUnimplementedSpecServer()
}

func RegisterSpecServer(s grpc.ServiceRegistrar, srv SpecServer) {
	s.RegisterService(&Spec_ServiceDesc, srv)
}

func _Spec_AddShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).AddShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/AddShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).AddShardSpec(ctx, req.(*AddShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_RemoveShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).RemoveShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/RemoveShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).RemoveShardSpec(ctx, req.(*RemoveShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_RebalanceShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).RebalanceShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/RebalanceShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).RebalanceShardSpec(ctx, req.(*RebalanceShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_ListShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).ListShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/ListShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).ListShardSpec(ctx, req.(*ListShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_GetShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).GetShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/GetShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).GetShardSpec(ctx, req.(*GetShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_CreateMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).CreateMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/CreateMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).CreateMigration(ctx, req.(*CreateMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_GetMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).GetMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/GetMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).GetMigration(ctx, req.(*QueryMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_ListMigration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMigrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).ListMigration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/ListMigration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).ListMigration(ctx, req.(*ListMigrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_UpdateNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).UpdateNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/UpdateNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).UpdateNodeSpec(ctx, req.(*UpdateNodeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_GetNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).GetNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/GetNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).GetNodeSpec(ctx, req.(*GetNodeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_CordonNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CordonNodeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).CordonNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/CordonNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).CordonNodeSpec(ctx, req.(*CordonNodeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_UncordonNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UncordonNodeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).UncordonNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/UncordonNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).UncordonNodeSpec(ctx, req.(*UncordonNodeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_DrainNodeSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DrainNodeSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).DrainNodeSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/DrainNodeSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).DrainNodeSpec(ctx, req.(*DrainNodeSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Spec_ServiceDesc is the grpc.ServiceDesc for Spec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Spec",
	HandlerType: (*SpecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShardSpec",
			Handler:    _Spec_AddShardSpec_Handler,
		},
		{
			MethodName: "RemoveShardSpec",
			Handler:    _Spec_RemoveShardSpec_Handler,
		},
		{
			MethodName: "RebalanceShardSpec",
			Handler:    _Spec_RebalanceShardSpec_Handler,
		},
		{
			MethodName: "ListShardSpec",
			Handler:    _Spec_ListShardSpec_Handler,
		},
		{
			MethodName: "GetShardSpec",
			Handler:    _Spec_GetShardSpec_Handler,
		},
		{
			MethodName: "CreateMigration",
			Handler:    _Spec_CreateMigration_Handler,
		},
		{
			MethodName: "GetMigration",
			Handler:    _Spec_GetMigration_Handler,
		},
		{
			MethodName: "ListMigration",
			Handler:    _Spec_ListMigration_Handler,
		},
		{
			MethodName: "UpdateNodeSpec",
			Handler:    _Spec_UpdateNodeSpec_Handler,
		},
		{
			MethodName: "GetNodeSpec",
			Handler:    _Spec_GetNodeSpec_Handler,
		},
		{
			MethodName: "CordonNodeSpec",
			Handler:    _Spec_CordonNodeSpec_Handler,
		},
		{
			MethodName: "UncordonNodeSpec",
			Handler:    _Spec_UncordonNodeSpec_Handler,
		},
		{
			MethodName: "DrainNodeSpec",
			Handler:    _Spec_DrainNodeSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/api.proto",
}
