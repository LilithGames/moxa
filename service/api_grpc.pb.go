// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeHostClient is the client API for NodeHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeHostClient interface {
	Info(ctx context.Context, in *NodeHostInfoRequest, opts ...grpc.CallOption) (*NodeHostInfoResponse, error)
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	ShardHealthz(ctx context.Context, in *ShardHealthzRequest, opts ...grpc.CallOption) (*ShardHealthzResponse, error)
	ShardNop(ctx context.Context, in *ShardNopRequest, opts ...grpc.CallOption) (*ShardNopResponse, error)
	AddNode(ctx context.Context, in *ShardAddNodeRequest, opts ...grpc.CallOption) (*ShardAddNodeResponse, error)
	RemoveNode(ctx context.Context, in *ShardRemoveNodeRequest, opts ...grpc.CallOption) (*ShardRemoveNodeResponse, error)
	ListNode(ctx context.Context, in *ShardListNodeRequest, opts ...grpc.CallOption) (*ShardListNodeResponse, error)
	TransferLeader(ctx context.Context, in *ShardTransferLeaderRequest, opts ...grpc.CallOption) (*ShardTransferLeaderResponse, error)
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
}

type nodeHostClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeHostClient(cc grpc.ClientConnInterface) NodeHostClient {
	return &nodeHostClient{cc}
}

func (c *nodeHostClient) Info(ctx context.Context, in *NodeHostInfoRequest, opts ...grpc.CallOption) (*NodeHostInfoResponse, error) {
	out := new(NodeHostInfoResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/Healthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ShardHealthz(ctx context.Context, in *ShardHealthzRequest, opts ...grpc.CallOption) (*ShardHealthzResponse, error) {
	out := new(ShardHealthzResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ShardHealthz", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ShardNop(ctx context.Context, in *ShardNopRequest, opts ...grpc.CallOption) (*ShardNopResponse, error) {
	out := new(ShardNopResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ShardNop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) AddNode(ctx context.Context, in *ShardAddNodeRequest, opts ...grpc.CallOption) (*ShardAddNodeResponse, error) {
	out := new(ShardAddNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) RemoveNode(ctx context.Context, in *ShardRemoveNodeRequest, opts ...grpc.CallOption) (*ShardRemoveNodeResponse, error) {
	out := new(ShardRemoveNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) ListNode(ctx context.Context, in *ShardListNodeRequest, opts ...grpc.CallOption) (*ShardListNodeResponse, error) {
	out := new(ShardListNodeResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/ListNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) TransferLeader(ctx context.Context, in *ShardTransferLeaderRequest, opts ...grpc.CallOption) (*ShardTransferLeaderResponse, error) {
	out := new(ShardTransferLeaderResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/TransferLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeHostClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/service.NodeHost/CreateSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeHostServer is the server API for NodeHost service.
// All implementations must embed UnimplementedNodeHostServer
// for forward compatibility
type NodeHostServer interface {
	Info(context.Context, *NodeHostInfoRequest) (*NodeHostInfoResponse, error)
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	ShardHealthz(context.Context, *ShardHealthzRequest) (*ShardHealthzResponse, error)
	ShardNop(context.Context, *ShardNopRequest) (*ShardNopResponse, error)
	AddNode(context.Context, *ShardAddNodeRequest) (*ShardAddNodeResponse, error)
	RemoveNode(context.Context, *ShardRemoveNodeRequest) (*ShardRemoveNodeResponse, error)
	ListNode(context.Context, *ShardListNodeRequest) (*ShardListNodeResponse, error)
	TransferLeader(context.Context, *ShardTransferLeaderRequest) (*ShardTransferLeaderResponse, error)
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	mustEmbedUnimplementedNodeHostServer()
}

// UnimplementedNodeHostServer must be embedded to have forward compatible implementations.
type UnimplementedNodeHostServer struct {
}

func (UnimplementedNodeHostServer) Info(context.Context, *NodeHostInfoRequest) (*NodeHostInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedNodeHostServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedNodeHostServer) ShardHealthz(context.Context, *ShardHealthzRequest) (*ShardHealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardHealthz not implemented")
}
func (UnimplementedNodeHostServer) ShardNop(context.Context, *ShardNopRequest) (*ShardNopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShardNop not implemented")
}
func (UnimplementedNodeHostServer) AddNode(context.Context, *ShardAddNodeRequest) (*ShardAddNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedNodeHostServer) RemoveNode(context.Context, *ShardRemoveNodeRequest) (*ShardRemoveNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedNodeHostServer) ListNode(context.Context, *ShardListNodeRequest) (*ShardListNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNode not implemented")
}
func (UnimplementedNodeHostServer) TransferLeader(context.Context, *ShardTransferLeaderRequest) (*ShardTransferLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferLeader not implemented")
}
func (UnimplementedNodeHostServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (UnimplementedNodeHostServer) mustEmbedUnimplementedNodeHostServer() {}

// UnsafeNodeHostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeHostServer will
// result in compilation errors.
type UnsafeNodeHostServer interface {
	mustEmbedUnimplementedNodeHostServer()
}

func RegisterNodeHostServer(s grpc.ServiceRegistrar, srv NodeHostServer) {
	s.RegisterService(&NodeHost_ServiceDesc, srv)
}

func _NodeHost_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHostInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).Info(ctx, req.(*NodeHostInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/Healthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ShardHealthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardHealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ShardHealthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ShardHealthz",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ShardHealthz(ctx, req.(*ShardHealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ShardNop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardNopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ShardNop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ShardNop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ShardNop(ctx, req.(*ShardNopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardAddNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).AddNode(ctx, req.(*ShardAddNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardRemoveNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).RemoveNode(ctx, req.(*ShardRemoveNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_ListNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardListNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).ListNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/ListNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).ListNode(ctx, req.(*ShardListNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_TransferLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShardTransferLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).TransferLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/TransferLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).TransferLeader(ctx, req.(*ShardTransferLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeHost_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeHostServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.NodeHost/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeHostServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeHost_ServiceDesc is the grpc.ServiceDesc for NodeHost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeHost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.NodeHost",
	HandlerType: (*NodeHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _NodeHost_Info_Handler,
		},
		{
			MethodName: "Healthz",
			Handler:    _NodeHost_Healthz_Handler,
		},
		{
			MethodName: "ShardHealthz",
			Handler:    _NodeHost_ShardHealthz_Handler,
		},
		{
			MethodName: "ShardNop",
			Handler:    _NodeHost_ShardNop_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _NodeHost_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _NodeHost_RemoveNode_Handler,
		},
		{
			MethodName: "ListNode",
			Handler:    _NodeHost_ListNode_Handler,
		},
		{
			MethodName: "TransferLeader",
			Handler:    _NodeHost_TransferLeader_Handler,
		},
		{
			MethodName: "CreateSnapshot",
			Handler:    _NodeHost_CreateSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/api.proto",
}

// SpecClient is the client API for Spec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpecClient interface {
	AddShardSpec(ctx context.Context, in *AddShardSpecRequest, opts ...grpc.CallOption) (*AddShardSpecResponse, error)
	RemoveShardSpec(ctx context.Context, in *RemoveShardSpecRequest, opts ...grpc.CallOption) (*RemoveShardSpecResponse, error)
	RebalanceShardSpec(ctx context.Context, in *RebalanceShardSpecRequest, opts ...grpc.CallOption) (*RebalanceShardSpecResponse, error)
	ListShardSpec(ctx context.Context, in *ListShardSpecRequest, opts ...grpc.CallOption) (*ListShardSpecResponse, error)
}

type specClient struct {
	cc grpc.ClientConnInterface
}

func NewSpecClient(cc grpc.ClientConnInterface) SpecClient {
	return &specClient{cc}
}

func (c *specClient) AddShardSpec(ctx context.Context, in *AddShardSpecRequest, opts ...grpc.CallOption) (*AddShardSpecResponse, error) {
	out := new(AddShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/AddShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) RemoveShardSpec(ctx context.Context, in *RemoveShardSpecRequest, opts ...grpc.CallOption) (*RemoveShardSpecResponse, error) {
	out := new(RemoveShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/RemoveShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) RebalanceShardSpec(ctx context.Context, in *RebalanceShardSpecRequest, opts ...grpc.CallOption) (*RebalanceShardSpecResponse, error) {
	out := new(RebalanceShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/RebalanceShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *specClient) ListShardSpec(ctx context.Context, in *ListShardSpecRequest, opts ...grpc.CallOption) (*ListShardSpecResponse, error) {
	out := new(ListShardSpecResponse)
	err := c.cc.Invoke(ctx, "/service.Spec/ListShardSpec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpecServer is the server API for Spec service.
// All implementations must embed UnimplementedSpecServer
// for forward compatibility
type SpecServer interface {
	AddShardSpec(context.Context, *AddShardSpecRequest) (*AddShardSpecResponse, error)
	RemoveShardSpec(context.Context, *RemoveShardSpecRequest) (*RemoveShardSpecResponse, error)
	RebalanceShardSpec(context.Context, *RebalanceShardSpecRequest) (*RebalanceShardSpecResponse, error)
	ListShardSpec(context.Context, *ListShardSpecRequest) (*ListShardSpecResponse, error)
	mustEmbedUnimplementedSpecServer()
}

// UnimplementedSpecServer must be embedded to have forward compatible implementations.
type UnimplementedSpecServer struct {
}

func (UnimplementedSpecServer) AddShardSpec(context.Context, *AddShardSpecRequest) (*AddShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddShardSpec not implemented")
}
func (UnimplementedSpecServer) RemoveShardSpec(context.Context, *RemoveShardSpecRequest) (*RemoveShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveShardSpec not implemented")
}
func (UnimplementedSpecServer) RebalanceShardSpec(context.Context, *RebalanceShardSpecRequest) (*RebalanceShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebalanceShardSpec not implemented")
}
func (UnimplementedSpecServer) ListShardSpec(context.Context, *ListShardSpecRequest) (*ListShardSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShardSpec not implemented")
}
func (UnimplementedSpecServer) mustEmbedUnimplementedSpecServer() {}

// UnsafeSpecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpecServer will
// result in compilation errors.
type UnsafeSpecServer interface {
	mustEmbedUnimplementedSpecServer()
}

func RegisterSpecServer(s grpc.ServiceRegistrar, srv SpecServer) {
	s.RegisterService(&Spec_ServiceDesc, srv)
}

func _Spec_AddShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).AddShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/AddShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).AddShardSpec(ctx, req.(*AddShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_RemoveShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).RemoveShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/RemoveShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).RemoveShardSpec(ctx, req.(*RemoveShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_RebalanceShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebalanceShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).RebalanceShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/RebalanceShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).RebalanceShardSpec(ctx, req.(*RebalanceShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spec_ListShardSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShardSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpecServer).ListShardSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.Spec/ListShardSpec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpecServer).ListShardSpec(ctx, req.(*ListShardSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Spec_ServiceDesc is the grpc.ServiceDesc for Spec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.Spec",
	HandlerType: (*SpecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddShardSpec",
			Handler:    _Spec_AddShardSpec_Handler,
		},
		{
			MethodName: "RemoveShardSpec",
			Handler:    _Spec_RemoveShardSpec_Handler,
		},
		{
			MethodName: "RebalanceShardSpec",
			Handler:    _Spec_RebalanceShardSpec_Handler,
		},
		{
			MethodName: "ListShardSpec",
			Handler:    _Spec_ListShardSpec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/api.proto",
}
